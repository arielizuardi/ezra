package mocks

import "github.com/stretchr/testify/mock"

import "github.com/arielizuardi/ezra/class"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FetchAllClasses provides a mock function with given fields:
func (_m *Repository) FetchAllClasses() ([]*class.Class, error) {
	ret := _m.Called()

	var r0 []*class.Class
	if rf, ok := ret.Get(0).(func() []*class.Class); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*class.Class)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClass provides a mock function with given fields: classID
func (_m *Repository) GetClass(classID string) (*class.Class, error) {
	ret := _m.Called(classID)

	var r0 *class.Class
	if rf, ok := ret.Get(0).(func(string) *class.Class); ok {
		r0 = rf(classID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*class.Class)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(classID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreClass provides a mock function with given fields: c
func (_m *Repository) StoreClass(c *class.Class) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*class.Class) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
