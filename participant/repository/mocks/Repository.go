package mocks

import "github.com/stretchr/testify/mock"

import "github.com/arielizuardi/ezra/participant"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetParticipant provides a mock function with given fields: participantID
func (_m *Repository) GetParticipant(participantID int64) (*participant.Participant, error) {
	ret := _m.Called(participantID)

	var r0 *participant.Participant
	if rf, ok := ret.Get(0).(func(int64) *participant.Participant); ok {
		r0 = rf(participantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(participantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantByName provides a mock function with given fields: name
func (_m *Repository) GetParticipantByName(name string) (*participant.Participant, error) {
	ret := _m.Called(name)

	var r0 *participant.Participant
	if rf, ok := ret.Get(0).(func(string) *participant.Participant); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreParticipant provides a mock function with given fields: p
func (_m *Repository) StoreParticipant(p *participant.Participant) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*participant.Participant) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
