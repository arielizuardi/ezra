package mocks

import "github.com/stretchr/testify/mock"

import "github.com/arielizuardi/ezra/feedback"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FetchFacilitatorFeedbacks provides a mock function with given fields: facilitatorID, batch, year
func (_m *Repository) FetchFacilitatorFeedbacks(facilitatorID int64, batch int64, year int64) ([]*feedback.FacilitatorFeedback, error) {
	ret := _m.Called(facilitatorID, batch, year)

	var r0 []*feedback.FacilitatorFeedback
	if rf, ok := ret.Get(0).(func(int64, int64, int64) []*feedback.FacilitatorFeedback); ok {
		r0 = rf(facilitatorID, batch, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.FacilitatorFeedback)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int64) error); ok {
		r1 = rf(facilitatorID, batch, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPresenterFeedbacks provides a mock function with given fields: presenterID, session, batch, year
func (_m *Repository) FetchPresenterFeedbacks(presenterID int64, session int64, batch int64, year int64) ([]*feedback.PresenterFeedback, error) {
	ret := _m.Called(presenterID, session, batch, year)

	var r0 []*feedback.PresenterFeedback
	if rf, ok := ret.Get(0).(func(int64, int64, int64, int64) []*feedback.PresenterFeedback); ok {
		r0 = rf(presenterID, session, batch, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.PresenterFeedback)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int64, int64) error); ok {
		r1 = rf(presenterID, session, batch, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
