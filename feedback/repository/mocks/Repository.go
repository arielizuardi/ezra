package mocks

import "github.com/stretchr/testify/mock"

import "github.com/arielizuardi/ezra/class"
import "github.com/arielizuardi/ezra/feedback"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FetchAllFeedbackFields provides a mock function with given fields:
func (_m *Repository) FetchAllFeedbackFields() ([]*feedback.Field, error) {
	ret := _m.Called()

	var r0 []*feedback.Field
	if rf, ok := ret.Get(0).(func() []*feedback.Field); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.Field)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchFacilitatorFeedbacks provides a mock function with given fields: facilitatorID, c
func (_m *Repository) FetchFacilitatorFeedbacks(facilitatorID int64, c *class.Class) ([]*feedback.FacilitatorFeedback, error) {
	ret := _m.Called(facilitatorID, c)

	var r0 []*feedback.FacilitatorFeedback
	if rf, ok := ret.Get(0).(func(int64, *class.Class) []*feedback.FacilitatorFeedback); ok {
		r0 = rf(facilitatorID, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.FacilitatorFeedback)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *class.Class) error); ok {
		r1 = rf(facilitatorID, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPresenterFeedbacks provides a mock function with given fields: presenterID, c, s
func (_m *Repository) FetchPresenterFeedbacks(presenterID int64, c *class.Class, s *class.Session) ([]*feedback.PresenterFeedback, error) {
	ret := _m.Called(presenterID, c, s)

	var r0 []*feedback.PresenterFeedback
	if rf, ok := ret.Get(0).(func(int64, *class.Class, *class.Session) []*feedback.PresenterFeedback); ok {
		r0 = rf(presenterID, c, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.PresenterFeedback)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *class.Class, *class.Session) error); ok {
		r1 = rf(presenterID, c, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorePresenterFeedbacks provides a mock function with given fields: feedbacks
func (_m *Repository) StorePresenterFeedbacks(feedbacks []*feedback.PresenterFeedback) error {
	ret := _m.Called(feedbacks)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*feedback.PresenterFeedback) error); ok {
		r0 = rf(feedbacks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
