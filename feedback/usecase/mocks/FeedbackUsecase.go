package mocks

import "github.com/arielizuardi/ezra/feedback/usecase"
import "github.com/stretchr/testify/mock"

import "github.com/arielizuardi/ezra/feedback"

// FeedbackUsecase is an autogenerated mock type for the FeedbackUsecase type
type FeedbackUsecase struct {
	mock.Mock
}

// FetchAllFeedbackFields provides a mock function with given fields:
func (_m *FeedbackUsecase) FetchAllFeedbackFields() ([]*feedback.Field, error) {
	ret := _m.Called()

	var r0 []*feedback.Field
	if rf, ok := ret.Get(0).(func() []*feedback.Field); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.Field)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreFacilitatorFeedbackWithMapping provides a mock function with given fields: classID, mappings, values
func (_m *FeedbackUsecase) StoreFacilitatorFeedbackWithMapping(classID string, mappings []*usecase.Mapping, values [][]string) ([]*feedback.FacilitatorFeedback, error) {
	ret := _m.Called(classID, mappings, values)

	var r0 []*feedback.FacilitatorFeedback
	if rf, ok := ret.Get(0).(func(string, []*usecase.Mapping, [][]string) []*feedback.FacilitatorFeedback); ok {
		r0 = rf(classID, mappings, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.FacilitatorFeedback)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*usecase.Mapping, [][]string) error); ok {
		r1 = rf(classID, mappings, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorePresenterFeedbackWithMapping provides a mock function with given fields: presenterID, classID, sessionID, mappings, values
func (_m *FeedbackUsecase) StorePresenterFeedbackWithMapping(presenterID int64, classID string, sessionID int64, mappings []*usecase.Mapping, values [][]string) ([]*feedback.PresenterFeedback, error) {
	ret := _m.Called(presenterID, classID, sessionID, mappings, values)

	var r0 []*feedback.PresenterFeedback
	if rf, ok := ret.Get(0).(func(int64, string, int64, []*usecase.Mapping, [][]string) []*feedback.PresenterFeedback); ok {
		r0 = rf(presenterID, classID, sessionID, mappings, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.PresenterFeedback)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string, int64, []*usecase.Mapping, [][]string) error); ok {
		r1 = rf(presenterID, classID, sessionID, mappings, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
