package mocks

import "github.com/stretchr/testify/mock"

import "github.com/arielizuardi/ezra/feedback"

// FeedbackUsecase is an autogenerated mock type for the FeedbackUsecase type
type FeedbackUsecase struct {
	mock.Mock
}

// FetchRatings provides a mock function with given fields:
func (_m *FeedbackUsecase) FetchRatings() ([]*feedback.Rating, error) {
	ret := _m.Called()

	var r0 []*feedback.Rating
	if rf, ok := ret.Get(0).(func() []*feedback.Rating); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*feedback.Rating)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreBatchFacilitatorFeedback provides a mock function with given fields: fb
func (_m *FeedbackUsecase) StoreBatchFacilitatorFeedback(fb *feedback.BatchFeedbackFacilitator) error {
	ret := _m.Called(fb)

	var r0 error
	if rf, ok := ret.Get(0).(func(*feedback.BatchFeedbackFacilitator) error); ok {
		r0 = rf(fb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreSessionPresenterFeedback provides a mock function with given fields: fb
func (_m *FeedbackUsecase) StoreSessionPresenterFeedback(fb *feedback.SessionFeedbackPresenter) error {
	ret := _m.Called(fb)

	var r0 error
	if rf, ok := ret.Get(0).(func(*feedback.SessionFeedbackPresenter) error); ok {
		r0 = rf(fb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
